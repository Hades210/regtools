

[twocolumn]article


-0.5in
-0.5in
0.0in
0in
0in
7.0in
9.5in
0in
0.05in
0.3pt

25pt

fancyvrb
relsize
hyperref

listings
amsmath



xleftmargin=5mm,framexleftmargin=10mm,basicstyle=


GROUP QUIZ SUBMISSION INSTRUCTIONS:



Your work must be submitted by 12 noon, March 12.  Submission must
be done from within the classroom.

Submit your work on handin, to the directory 132quiz8.

Your .tar file name must conform to the rules explained in our
Syllabus, Section 19.4.  

Your .tar file must comprise three files, named 
Problem1a.R, FindEta.R and Problem 2.R, with contents
as specified below. 



My grading script will be 


source("Problem1a.R")
whicheqn()
# set p (not shown)
source("FindEta.R")
findeta(p)
source("Problem2.R")
# set c, n, nreps (not shown)
cmp2ests(c,n,nreps)


You are welcome to search the Web, though my saying this should not be
construed to mean you necessarily would benefit from this.



1.  Consider an -state Markov chain that is irreducible,
meaning that it is possible to get from any state  to any other state
 in some number of steps.  Define the random variable  to be
the time needed to go from state  to state .  (Note that 
is NOT 0, though it can be 1 if .)







where  is the state traveled to immediately after leaving state .
This then implies that








We'll focus on the case , i.e. look at how long it takes to get
to state .  Let  denote , and define  
.  (Note that  has only 
components!)  So,









In this problem you'll develop an R function to calculate .

Here is a easy (though trivial) example of .  Suppose the
transition matrix of the chain is












Then one can see right away without any computation that







[(a)] Give the number of our textbook equation that most justifies
(), among material prior to Chapter 4.

Your answer will take the form of an R function whicheqn() that
consists of a single print() call, e.g.


print("(2,168)")


[(b)] Using (), write an R function with call form


findeta(p)


that inputs the Markov chain's transition matrix p and returns
.

Hints:  Remember, in () the  are the knowns, and the
 are the unknowns.  Start with a very simple example, say
().



2.  This problem concerns the raffle example in Section 13.1 of
our book.  We have two competing estimators, and you will write
simulation code to compare them in terms of bias and mean absolute error,











Your code will consist of a function with call form


cmp2ests(c,n,nreps)


and will return the (approximate) vector c(b1,b2,e1,e2).  Here
c and n are as in the raffle example (but are general,
unrelated to the specific data in that example), and nreps is our
usual number of ``notebook lines.''  Assume sampling without
replacement, even though the theory behind  is based on
with-replacement sampling. Thus assume that .


                                                                                

                                                                                
Solutions:                                                                
                                                                                
1a. (3.154)                                                               
                                                                                
1b.                                                                       
                                                                                
                                                              
findeta <- function(p)                                                         
   n <- nrow(p)                                                                 
   q <- diag(n) - p                                                             
   q <- q[1:(n-1),1:(n-1)]                                                      
   ones <- rep(1,n-1)                                                           
   solve(q,ones)                                                                
                                                                               
                        

2.


cmp2ests <- function(c,n,nreps) 
   out <- matrix(nrow=nreps,ncol=2)
   for (i in 1:nreps) 
      x <- sample(1:c,n,replace=FALSE)
      out[i,1] <- 2*mean(x) - 1
      out[i,2] <- max(x)
   
   c(
      mean(out[,1] - c),
      mean(out[,2] - c),
      mean(abs(out[,1] - c)),
      mean(abs(out[,2] - c)))





> cmp2ests(c,n,nreps)
[1] -0.003373333 -0.613600000  1.744820000  0.613600000

