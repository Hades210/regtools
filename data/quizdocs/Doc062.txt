[twocolumn]article

-0.5in
-0.5in
0.0in
0in
0in
7.0in
9.5in
0in
0.05in
0.3pt

25pt

fancyvrb
relsize
hyperref

listings
amsmath



xleftmargin=5mm,framexleftmargin=10mm,basicstyle=

Name: 

Directions: Work only on this sheet (on both sides, if
needed).  MAKE SURE TO COPY YOUR ANSWERS TO A SEPARATE SHEET FOR SENDING
ME AN ELECTRONIC COPY LATER.

On all Tests, 32-bit word size on Intel machines running Linux is
assumed unless otherwise stated.

1. (20)  A C's return is translated to a certain
machine/asembly language instruction.  What is its name?

2. (25) Suppose we are debugging the code on pp.64-65.  Then names
such as sum and top will be available to us from our
debugging tool if we had used the  option
at the time we assembled the program.

3. (25) Consider the function


int f(n)
  int k;
   k = n * f(n-1);
   return k;



Suppose at runtime the operating system has allocated 600 words for our
stack, and that we do not have write permission for the first word below
(i.e. at a smaller address) the stack space.  Say the stack is empty,
and we make the call f(100).  Then we will get a seg fault on the
 (or  or  or )
call to f(); fill in the blank, using an R expression as your
answer.

4. (30) Suppose several local variables in a C source file are declared
this way:


int x = 5;
static y, z = 12;
// equiv. to static int y,z=12;


Then probably:



[(a)] (10) 
The variable x will be stored in 
.


[(b)] (10) 
The variable y will be stored in
.

[(c)] (10) 
The variable z will be stored in
.



Solutions:

1.


ret


2.


--gstabs


3.
Each call expands the stack by 4 words (1 for argument, 1
for local, 1 for bread crumbs, 1 for saved EBP), so 150 calls will
fill the stack, and the 151st will cause a seg fault.

4.a in the stack

4.b in a .comm segment

4.c in a .data segment



C return translated to ret

return names like sum, top:  --gstabs

recursion:  each call expands the stack by 4 words (1 for argument, 1
for local, 1 for bread crumbs, 1 for saved EBP), so 150 calls will
fill the stack, and the 151st will cause a seg fault

storage of locals:  x in the stack, y in the .comm section, z in the
.data section

